datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// ENUM
enum Role {
    USER
    ADMIN
}

enum UserType {
    GOOGLE
    GITHUB
    EMAIL_PASSWORD
}

// TYPES
type UserSocial {
    github String
    google String
}

type CoverImage {
    url       String @default("https://via.placeholder.com/800x450.png")
    localPath String @default("")
}

// MODELS
model User {
    id                      String      @id @default(auto()) @map("_id") @db.ObjectId
    username                String      @unique
    email                   String      @unique
    role                    Role        @default(USER)
    password                String
    loginType               UserType    @default(EMAIL_PASSWORD)
    isEmailVerified         Boolean     @default(false)
    refreshToken            String?
    forgotPasswordToken     String?
    forgotPasswordExpiry    DateTime?
    emailVerificationToken  String?
    emailVerificationExpiry DateTime?
    social                  UserSocial?
    avatar                  CoverImage?
    createdAt               DateTime    @default(now())
    updatedAt               DateTime    @updatedAt
    Quotes                  Quotes[]
    Todo                    Todo[]

    @@index([id])
}

model Quotes {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    tags       String[]
    creatorId  String   @db.ObjectId
    creator    User     @relation(fields: [creatorId], references: [id])
    author     String
    authorSlug String
    length     Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model StatusCode {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    statusCode    Int    @unique
    statusMessage String
    description   String
    category      String
}

model Todo {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    isComplete  Boolean  @default(false)
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

// model EcomCoupon {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }
